import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Sample Data (replace with actual dataset)
data = pd.DataFrame({
    'review': ['Great product', 'Worst item ever', 'Very satisfied', 'Not as expected', 'Loved it', 'Terrible'],
    'rating': [5, 1, 5, 2, 5, 1]
})

# Step 1: Preprocessing
X = data['review']  # Features (review text)
y = data['rating']  # Labels (rating)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# TF-IDF Vectorization
tfidf = TfidfVectorizer(stop_words='english', max_df=0.95)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Train the Model (Naive Bayes)
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Streamlit App Interface
st.title("Product Review Rating Predictor")

# Input Box for User
user_input = st.text_area("Enter a product review:", "This product is amazing!")

# Predict Button
if st.button("Predict Rating"):
    if user_input:
        # Preprocess user input
        input_tfidf = tfidf.transform([user_input])
        
        # Prediction
        prediction = model.predict(input_tfidf)[0]
        
        # Display the result
        st.write(f"Predicted Rating: {prediction}/5")
    else:
        st.write("Please enter a review to predict the rating.")

# Show Accuracy (Optional)
if st.checkbox("Show Model Accuracy"):
    y_pred = model.predict(X_test_tfidf)
    accuracy = accuracy_score(y_test, y_pred)
    st.write(f"Model Accuracy: {accuracy:.2f}")
    st.write("Classification Report:\n", classification_report(y_test, y_pred))
